"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const StoreUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/Auth/StoreUserValidator"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const LoginValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/Auth/LoginValidator"));
class AuthController {
    async register({ request, response }) {
        const payload = await request.validate(StoreUserValidator_1.default);
        const user = await User_1.default.create(payload);
        return response.created({ user });
    }
    async login({ auth, request, response }) {
        const { email, password } = await request.validate(LoginValidator_1.default);
        const token = await auth.use('api').attempt(email, password);
        const user = auth.user;
        return response.ok({
            "token": token.token,
            "user": {
                "id": user.id,
                "email": user.email,
                "is_admin": user.is_admin
            }
        });
    }
    async checkifican({ auth, params, response }) {
        await auth.use('api').logout();
        await auth.use('api').loginViaId(params.id);
        const token = await auth.use('api').loginViaId(params.id);
        console.log(token.token);
        console.log(auth.user?.$attributes);
        return response.ok({
            "isAdmin": auth.user?.$attributes.is_admin,
            "id": auth.user?.$attributes.id,
            "token": token.token
        });
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLHNIQUF1RTtBQUN2RSxpRkFBa0M7QUFDbEMsOEdBQStEO0FBRS9ELE1BQXFCLGNBQWM7SUFDMUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzlELE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyw0QkFBa0IsQ0FBQyxDQUFBO1FBQzFELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN2QyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQ2pFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLHdCQUFjLENBQUMsQ0FBQTtRQUNsRSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUM1RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSyxDQUFBO1FBQ3ZCLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNqQixPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDcEIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDYixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUTthQUMxQjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQ3RFLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUM5QixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMzQyxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDbkMsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ2pCLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxRQUFRO1lBQzFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQy9CLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSztTQUNyQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUFqQ0QsaUNBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcblxuaW1wb3J0IFN0b3JlVXNlclZhbGlkYXRvciBmcm9tIFwiQXBwL1ZhbGlkYXRvcnMvQXV0aC9TdG9yZVVzZXJWYWxpZGF0b3JcIlxuaW1wb3J0IFVzZXIgZnJvbSBcIkFwcC9Nb2RlbHMvVXNlclwiXG5pbXBvcnQgTG9naW5WYWxpZGF0b3IgZnJvbSBcIkFwcC9WYWxpZGF0b3JzL0F1dGgvTG9naW5WYWxpZGF0b3JcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyByZWdpc3Rlcih7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShTdG9yZVVzZXJWYWxpZGF0b3IpXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHBheWxvYWQpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmNyZWF0ZWQoeyB1c2VyIH0pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9naW4oeyBhdXRoLCByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoTG9naW5WYWxpZGF0b3IpXG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXR0ZW1wdChlbWFpbCwgcGFzc3dvcmQpXG4gICAgY29uc3QgdXNlciA9IGF1dGgudXNlciFcbiAgICByZXR1cm4gcmVzcG9uc2Uub2soe1xuICAgICAgXCJ0b2tlblwiOiB0b2tlbi50b2tlbixcbiAgICAgIFwidXNlclwiOiB7XG4gICAgICAgIFwiaWRcIjogdXNlci5pZCxcbiAgICAgICAgXCJlbWFpbFwiOiB1c2VyLmVtYWlsLFxuICAgICAgICBcImlzX2FkbWluXCI6IHVzZXIuaXNfYWRtaW5cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGNoZWNraWZpY2FuKHsgYXV0aCwgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmxvZ291dCgpXG4gICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmxvZ2luVmlhSWQocGFyYW1zLmlkKVxuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmxvZ2luVmlhSWQocGFyYW1zLmlkKVxuICAgIGNvbnNvbGUubG9nKHRva2VuLnRva2VuKVxuICAgIGNvbnNvbGUubG9nKGF1dGgudXNlcj8uJGF0dHJpYnV0ZXMpXG4gICAgcmV0dXJuIHJlc3BvbnNlLm9rKHtcbiAgICAgIFwiaXNBZG1pblwiOiBhdXRoLnVzZXI/LiRhdHRyaWJ1dGVzLmlzX2FkbWluLFxuICAgICAgXCJpZFwiOiBhdXRoLnVzZXI/LiRhdHRyaWJ1dGVzLmlkLFxuICAgICAgXCJ0b2tlblwiOiB0b2tlbi50b2tlblxuICAgIH0pXG4gIH1cbn1cbiJdfQ==