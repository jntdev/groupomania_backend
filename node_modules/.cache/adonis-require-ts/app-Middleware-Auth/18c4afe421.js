"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/auth/build/standalone");
class AuthMiddleware {
    constructor() {
        this.redirectTo = '/login';
    }
    async authenticate(auth, guards) {
        let guardLastAttempted;
        for (let guard of guards) {
            guardLastAttempted = guard;
            if (await auth.use(guard).check()) {
                auth.defaultGuard = guard;
                return true;
            }
        }
        throw new standalone_1.AuthenticationException('Unauthorized access', 'E_UNAUTHORIZED_ACCESS', guardLastAttempted, this.redirectTo);
    }
    async handle({ auth }, next, customGuards) {
        const guards = customGuards.length ? customGuards : [auth.name];
        console.log(guards);
        await this.authenticate(auth, guards);
        await next();
    }
}
exports.default = AuthMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxnRUFBeUU7QUFTekUsTUFBcUIsY0FBYztJQUFuQztRQUtZLGVBQVUsR0FBRyxRQUFRLENBQUE7SUE4RGpDLENBQUM7SUFwRFcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFpQyxFQUFFLE1BQTRCO1FBTzFGLElBQUksa0JBQXNDLENBQUE7UUFFMUMsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsa0JBQWtCLEdBQUcsS0FBSyxDQUFBO1lBRTFCLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQU1qQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQTtnQkFDekIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBS0QsTUFBTSxJQUFJLG9DQUF1QixDQUMvQixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFBO0lBRUgsQ0FBQztJQUtNLEtBQUssQ0FBQyxNQUFNLENBQ2pCLEVBQUUsSUFBSSxFQUF1QixFQUM3QixJQUF5QixFQUN6QixZQUFrQztRQU1sQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbkIsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNyQyxNQUFNLElBQUksRUFBRSxDQUFBO0lBQ2QsQ0FBQztDQUNGO0FBbkVELGlDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEd1YXJkc0xpc3QgfSBmcm9tICdAaW9jOkFkb25pcy9BZGRvbnMvQXV0aCdcbmltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25FeGNlcHRpb24gfSBmcm9tICdAYWRvbmlzanMvYXV0aC9idWlsZC9zdGFuZGFsb25lJ1xuXG4vKipcbiAqIEF1dGggbWlkZGxld2FyZSBpcyBtZWFudCB0byByZXN0cmljdCB1bi1hdXRoZW50aWNhdGVkIGFjY2VzcyB0byBhIGdpdmVuIHJvdXRlXG4gKiBvciBhIGdyb3VwIG9mIHJvdXRlcy5cbiAqXG4gKiBZb3UgbXVzdCByZWdpc3RlciB0aGlzIG1pZGRsZXdhcmUgaW5zaWRlIGBzdGFydC9rZXJuZWwudHNgIGZpbGUgdW5kZXIgdGhlIGxpc3RcbiAqIG9mIG5hbWVkIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhNaWRkbGV3YXJlIHtcblxuICAvKipcbiAgICogVGhlIFVSTCB0byByZWRpcmVjdCB0byB3aGVuIHJlcXVlc3QgaXMgVW5hdXRob3JpemVkXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVkaXJlY3RUbyA9ICcvbG9naW4nXG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZXMgdGhlIGN1cnJlbnQgSFRUUCByZXF1ZXN0IGFnYWluc3QgYSBjdXN0b20gc2V0IG9mIGRlZmluZWRcbiAgICogZ3VhcmRzLlxuICAgKlxuICAgKiBUaGUgYXV0aGVudGljYXRpb24gbG9vcCBzdG9wcyBhcyBzb29uIGFzIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0ZWQgdXNpbmcgYW55XG4gICAqIG9mIHRoZSBtZW50aW9uZWQgZ3VhcmRzIGFuZCB0aGF0IGd1YXJkIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVzdCBvZiB0aGUgY29kZVxuICAgKiBkdXJpbmcgdGhlIGN1cnJlbnQgcmVxdWVzdC5cbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBhdXRoZW50aWNhdGUoYXV0aDogSHR0cENvbnRleHRDb250cmFjdFsnYXV0aCddLCBndWFyZHM6IChrZXlvZiBHdWFyZHNMaXN0KVtdKSB7XG4gICAgLyoqXG4gICAgICogSG9sZCByZWZlcmVuY2UgdG8gdGhlIGd1YXJkIGxhc3QgYXR0ZW1wdGVkIHdpdGhpbiB0aGUgZm9yIGxvb3AuIFdlIHBhc3NcbiAgICAgKiB0aGUgcmVmZXJlbmNlIG9mIHRoZSBndWFyZCB0byB0aGUgXCJBdXRoZW50aWNhdGlvbkV4Y2VwdGlvblwiLCBzbyB0aGF0XG4gICAgICogaXQgY2FuIGRlY2lkZSB0aGUgY29ycmVjdCByZXNwb25zZSBiZWhhdmlvciBiYXNlZCB1cG9uIHRoZSBndWFyZFxuICAgICAqIGRyaXZlclxuICAgICAqL1xuICAgIGxldCBndWFyZExhc3RBdHRlbXB0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gICAgZm9yIChsZXQgZ3VhcmQgb2YgZ3VhcmRzKSB7XG4gICAgICBndWFyZExhc3RBdHRlbXB0ZWQgPSBndWFyZFxuXG4gICAgICBpZiAoYXdhaXQgYXV0aC51c2UoZ3VhcmQpLmNoZWNrKCkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc3RydWN0IGF1dGggdG8gdXNlIHRoZSBnaXZlbiBndWFyZCBhcyB0aGUgZGVmYXVsdCBndWFyZCBmb3JcbiAgICAgICAgICogdGhlIHJlc3Qgb2YgdGhlIHJlcXVlc3QsIHNpbmNlIHRoZSB1c2VyIGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICogc3VjY2VlZGVkIGhlcmVcbiAgICAgICAgICovXG4gICAgICAgIGF1dGguZGVmYXVsdEd1YXJkID0gZ3VhcmRcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbmFibGUgdG8gYXV0aGVudGljYXRlIHVzaW5nIGFueSBndWFyZFxuICAgICAqL1xuICAgIHRocm93IG5ldyBBdXRoZW50aWNhdGlvbkV4Y2VwdGlvbihcbiAgICAgICdVbmF1dGhvcml6ZWQgYWNjZXNzJyxcbiAgICAgICdFX1VOQVVUSE9SSVpFRF9BQ0NFU1MnLFxuICAgICAgZ3VhcmRMYXN0QXR0ZW1wdGVkLFxuICAgICAgdGhpcy5yZWRpcmVjdFRvLFxuICAgIClcblxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSByZXF1ZXN0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgaGFuZGxlIChcbiAgICB7IGF1dGggfTogSHR0cENvbnRleHRDb250cmFjdCxcbiAgICBuZXh0OiAoKSA9PiBQcm9taXNlPHZvaWQ+LFxuICAgIGN1c3RvbUd1YXJkczogKGtleW9mIEd1YXJkc0xpc3QpW11cbiAgKSB7XG4gICAgLyoqXG4gICAgICogVXNlcyB0aGUgdXNlciBkZWZpbmVkIGd1YXJkcyBvciB0aGUgZGVmYXVsdCBndWFyZCBtZW50aW9uZWQgaW5cbiAgICAgKiB0aGUgY29uZmlnIGZpbGVcbiAgICAgKi9cbiAgICBjb25zdCBndWFyZHMgPSBjdXN0b21HdWFyZHMubGVuZ3RoID8gY3VzdG9tR3VhcmRzIDogW2F1dGgubmFtZV1cbiAgICBjb25zb2xlLmxvZyhndWFyZHMpXG4gICAgYXdhaXQgdGhpcy5hdXRoZW50aWNhdGUoYXV0aCwgZ3VhcmRzKVxuICAgIGF3YWl0IG5leHQoKVxuICB9XG59XG4iXX0=